-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "ltree";

-- Create custom types
CREATE TYPE trust_level AS ENUM ('level_1', 'level_2', 'level_3', 'level_4', 'level_5');
CREATE TYPE vote_type AS ENUM ('up', 'down');

-- Users table with anti-bot tracking
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email VARCHAR(255) UNIQUE NOT NULL,
    username VARCHAR(50) UNIQUE NOT NULL,
    full_name VARCHAR(255),
    avatar_url TEXT,
    trust_level INTEGER DEFAULT 1 CHECK (trust_level BETWEEN 1 AND 5),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_bot BOOLEAN DEFAULT FALSE,
    bot_score DECIMAL(3,2) DEFAULT 0.0 CHECK (bot_score BETWEEN 0.0 AND 1.0),
    total_posts INTEGER DEFAULT 0,
    total_comments INTEGER DEFAULT 0,
    reports_received INTEGER DEFAULT 0
);

-- Categories table with hierarchical structure
CREATE TABLE categories (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    slug VARCHAR(255) UNIQUE NOT NULL,
    parent_id UUID REFERENCES categories(id) ON DELETE CASCADE,
    path LTREE,
    level INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    thread_count INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE
);

-- Threads table for main posts
CREATE TABLE threads (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title VARCHAR(500) NOT NULL,
    content TEXT NOT NULL,
    author_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    category_id UUID NOT NULL REFERENCES categories(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    upvotes INTEGER DEFAULT 0,
    downvotes INTEGER DEFAULT 0,
    comment_count INTEGER DEFAULT 0,
    is_pinned BOOLEAN DEFAULT FALSE,
    is_locked BOOLEAN DEFAULT FALSE,
    hot_score DECIMAL(10,4) DEFAULT 0.0
);

-- Comments table with LTREE for nested structure
CREATE TABLE comments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    content TEXT NOT NULL,
    author_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    thread_id UUID NOT NULL REFERENCES threads(id) ON DELETE CASCADE,
    parent_path LTREE,
    path LTREE NOT NULL,
    depth INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    upvotes INTEGER DEFAULT 0,
    downvotes INTEGER DEFAULT 0
);

-- Moderators table for democratic moderation
CREATE TABLE moderators (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    category_id UUID NOT NULL REFERENCES categories(id) ON DELETE CASCADE,
    appointed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    appointed_by UUID REFERENCES users(id),
    term_ends_at TIMESTAMP WITH TIME ZONE,
    is_active BOOLEAN DEFAULT TRUE,
    UNIQUE(user_id, category_id)
);

-- Votes table for upvotes/downvotes
CREATE TABLE votes (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    thread_id UUID REFERENCES threads(id) ON DELETE CASCADE,
    comment_id UUID REFERENCES comments(id) ON DELETE CASCADE,
    vote_type vote_type NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id, thread_id),
    UNIQUE(user_id, comment_id),
    CHECK (
        (thread_id IS NOT NULL AND comment_id IS NULL) OR
        (thread_id IS NULL AND comment_id IS NOT NULL)
    )
);

-- Indexes for performance
CREATE INDEX idx_categories_path ON categories USING GIST (path);
CREATE INDEX idx_categories_parent_id ON categories(parent_id);
CREATE INDEX idx_threads_category_id ON threads(category_id);
CREATE INDEX idx_threads_author_id ON threads(author_id);
CREATE INDEX idx_threads_hot_score ON threads(hot_score DESC);
CREATE INDEX idx_comments_thread_id ON comments(thread_id);
CREATE INDEX idx_comments_path ON comments USING GIST (path);
CREATE INDEX idx_comments_parent_path ON comments USING GIST (parent_path);
CREATE INDEX idx_votes_user_thread ON votes(user_id, thread_id);
CREATE INDEX idx_votes_user_comment ON votes(user_id, comment_id);
CREATE INDEX idx_users_trust_level ON users(trust_level);
CREATE INDEX idx_users_bot_score ON users(bot_score);

-- RLS (Row Level Security) policies
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE threads ENABLE ROW LEVEL SECURITY;
ALTER TABLE comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE moderators ENABLE ROW LEVEL SECURITY;
ALTER TABLE votes ENABLE ROW LEVEL SECURITY;

-- Basic RLS policies (to be expanded based on requirements)
CREATE POLICY "Users can read all profiles" ON users FOR SELECT USING (true);
CREATE POLICY "Users can update own profile" ON users FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Categories are publicly readable" ON categories FOR SELECT USING (is_active = true);

CREATE POLICY "Threads are publicly readable" ON threads FOR SELECT USING (true);
CREATE POLICY "Users can create threads if trust level >= 2" ON threads FOR INSERT
    WITH CHECK (auth.uid() = author_id AND (SELECT trust_level FROM users WHERE id = auth.uid()) >= 2);

CREATE POLICY "Comments are publicly readable" ON comments FOR SELECT USING (true);
CREATE POLICY "Users can create comments if trust level >= 2" ON comments FOR INSERT
    WITH CHECK (auth.uid() = author_id AND (SELECT trust_level FROM users WHERE id = auth.uid()) >= 2);

CREATE POLICY "Users can manage their own votes" ON votes FOR ALL USING (auth.uid() = user_id);